import * as T from "../Table"
import { arbitraryValue } from "./arbitrary"
import { TypeMap } from "./TypeMap"

export const Schema = new T.Table(new T.TProxy<TypeMap>(), {
  string0: { type: "string" },
  string1: { type: "string" },
  string2: { type: "string" },
  string3: { type: "string" },
  string4: { type: "string" },
  string5: { type: "string" },
  string6: { type: "string" },
  string7: { type: "string" },
  string8: { type: "string" },
  string9: { type: "string" },
  string10: { type: "string" },
  string11: { type: "string" },
  string12: { type: "string" },
  string13: { type: "string" },
  string14: { type: "string" },
  string15: { type: "string" },
  string16: { type: "string" },
  string17: { type: "string" },
  string18: { type: "string" },
  string19: { type: "string" },
  number0: { type: "number" },
  number1: { type: "number" },
  number2: { type: "number" },
  number3: { type: "number" },
  number4: { type: "number" },
  number5: { type: "number" },
  number6: { type: "number" },
  number7: { type: "number" },
  number8: { type: "number" },
  number9: { type: "number" },
  number10: { type: "number" },
  number11: { type: "number" },
  number12: { type: "number" },
  number13: { type: "number" },
  number14: { type: "number" },
  number15: { type: "number" },
  number16: { type: "number" },
  number17: { type: "number" },
  number18: { type: "number" },
  number19: { type: "number" },
  percent0: { type: "percent" },
  percent1: { type: "percent" },
  percent2: { type: "percent" },
  percent3: { type: "percent" },
  percent4: { type: "percent" },
  percent5: { type: "percent" },
  percent6: { type: "percent" },
  percent7: { type: "percent" },
  percent8: { type: "percent" },
  percent9: { type: "percent" },
  percent10: { type: "percent" },
  percent11: { type: "percent" },
  percent12: { type: "percent" },
  percent13: { type: "percent" },
  percent14: { type: "percent" },
  percent15: { type: "percent" },
  percent16: { type: "percent" },
  percent17: { type: "percent" },
  percent18: { type: "percent" },
  percent19: { type: "percent" },
  boolean0: { type: "boolean" },
  boolean2: { type: "boolean" },
  boolean3: { type: "boolean" },
  boolean4: { type: "boolean" },
  boolean5: { type: "boolean" },
  boolean6: { type: "boolean" },
  boolean7: { type: "boolean" },
  boolean8: { type: "boolean" },
  boolean9: { type: "boolean" },
  boolean10: { type: "boolean" },
  boolean12: { type: "boolean" },
  boolean13: { type: "boolean" },
  boolean14: { type: "boolean" },
  boolean15: { type: "boolean" },
  boolean16: { type: "boolean" },
  boolean17: { type: "boolean" },
  boolean18: { type: "boolean" },
  boolean19: { type: "boolean" },
  date0: { type: "date" },
  date1: { type: "date" },
  date2: { type: "date" },
  date3: { type: "date" },
  date4: { type: "date" },
  date5: { type: "date" },
  date6: { type: "date" },
  date7: { type: "date" },
  date8: { type: "date" },
  date9: { type: "date" },
  date10: { type: "date" },
  date11: { type: "date" },
  date12: { type: "date" },
  date13: { type: "date" },
  date14: { type: "date" },
  date15: { type: "date" },
  date16: { type: "date" },
  date17: { type: "date" },
  date18: { type: "date" },
  date19: { type: "date" },
})

export type Schema = typeof Schema

export type ColId = T.ColumnTagsOf<Schema>

export type Col = T.ColOf<Schema>

export const Columns: Col[] = (Object.keys(Schema.Columns) as ColId[]).map((id) => Schema.getCol(id))

export type Row = T.RowOf<Schema>

export const Row = (i: number): Row => Columns.reduce((acc, { id, type }) => ({
  [id]: arbitraryValue(type, i),
  ...acc,
}), {}) as Row

export type Cell = T.CellOf<Schema>
