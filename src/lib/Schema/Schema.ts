import * as T from "../Table"
import { arbitraryValue } from "./arbitrary"
import { TypeMap } from "./TypeMap"


export const Schema = new T.Table(new T.TProxy<TypeMap>(), {
  string0: { type: "string", label: "db_string0" },
  string1: { type: "string", label: "db_string1" },
  string2: { type: "string", label: "db_string2" },
  string3: { type: "string", label: "db_string3" },
  string4: { type: "string", label: "db_string4" },
  string5: { type: "string", label: "db_string5" },
  string6: { type: "string", label: "db_string6" },
  string7: { type: "string", label: "db_string7" },
  string8: { type: "string", label: "db_string8" },
  string9: { type: "string", label: "db_string9" },
  string10: { type: "string", label: "db_string10" },
  string11: { type: "string", label: "db_string11" },
  string12: { type: "string", label: "db_string12" },
  string13: { type: "string", label: "db_string13" },
  string14: { type: "string", label: "db_string14" },
  string15: { type: "string", label: "db_string15" },
  string16: { type: "string", label: "db_string16" },
  string17: { type: "string", label: "db_string17" },
  string18: { type: "string", label: "db_string18" },
  string19: { type: "string", label: "db_string19" },
  number0: { type: "number", label: "db_number0" },
  number1: { type: "number", label: "db_number1" },
  number2: { type: "number", label: "db_number2" },
  number3: { type: "number", label: "db_number3" },
  number4: { type: "number", label: "db_number4" },
  number5: { type: "number", label: "db_number5" },
  number6: { type: "number", label: "db_number6" },
  number7: { type: "number", label: "db_number7" },
  number8: { type: "number", label: "db_number8" },
  number9: { type: "number", label: "db_number9" },
  number10: { type: "number", label: "db_number10" },
  number11: { type: "number", label: "db_number11" },
  number12: { type: "number", label: "db_number12" },
  number13: { type: "number", label: "db_number13" },
  number14: { type: "number", label: "db_number14" },
  number15: { type: "number", label: "db_number15" },
  number16: { type: "number", label: "db_number16" },
  number17: { type: "number", label: "db_number17" },
  number18: { type: "number", label: "db_number18" },
  number19: { type: "number", label: "db_number19" },
  percent0: { type: "percent", label: "db_percent0" },
  percent1: { type: "percent", label: "db_percent1" },
  percent2: { type: "percent", label: "db_percent2" },
  percent3: { type: "percent", label: "db_percent3" },
  percent4: { type: "percent", label: "db_percent4" },
  percent5: { type: "percent", label: "db_percent5" },
  percent6: { type: "percent", label: "db_percent6" },
  percent7: { type: "percent", label: "db_percent7" },
  percent8: { type: "percent", label: "db_percent8" },
  percent9: { type: "percent", label: "db_percent9" },
  percent10: { type: "percent", label: "db_percent10" },
  percent11: { type: "percent", label: "db_percent11" },
  percent12: { type: "percent", label: "db_percent12" },
  percent13: { type: "percent", label: "db_percent13" },
  percent14: { type: "percent", label: "db_percent14" },
  percent15: { type: "percent", label: "db_percent15" },
  percent16: { type: "percent", label: "db_percent16" },
  percent17: { type: "percent", label: "db_percent17" },
  percent18: { type: "percent", label: "db_percent18" },
  percent19: { type: "percent", label: "db_percent19" },
  boolean0: { type: "boolean", label: "db_boolean0" },
  boolean2: { type: "boolean", label: "db_boolean2" },
  boolean3: { type: "boolean", label: "db_boolean3" },
  boolean4: { type: "boolean", label: "db_boolean4" },
  boolean5: { type: "boolean", label: "db_boolean5" },
  boolean6: { type: "boolean", label: "db_boolean6" },
  boolean7: { type: "boolean", label: "db_boolean7" },
  boolean8: { type: "boolean", label: "db_boolean8" },
  boolean9: { type: "boolean", label: "db_boolean9" },
  boolean10: { type: "boolean", label: "db_boolean10" },
  boolean12: { type: "boolean", label: "db_boolean12" },
  boolean13: { type: "boolean", label: "db_boolean13" },
  boolean14: { type: "boolean", label: "db_boolean14" },
  boolean15: { type: "boolean", label: "db_boolean15" },
  boolean16: { type: "boolean", label: "db_boolean16" },
  boolean17: { type: "boolean", label: "db_boolean17" },
  boolean18: { type: "boolean", label: "db_boolean18" },
  boolean19: { type: "boolean", label: "db_boolean19" },
  date0: { type: "date", label: "db_date0" },
  date1: { type: "date", label: "db_date1" },
  date2: { type: "date", label: "db_date2" },
  date3: { type: "date", label: "db_date3" },
  date4: { type: "date", label: "db_date4" },
  date5: { type: "date", label: "db_date5" },
  date6: { type: "date", label: "db_date6" },
  date7: { type: "date", label: "db_date7" },
  date8: { type: "date", label: "db_date8" },
  date9: { type: "date", label: "db_date9" },
  date10: { type: "date", label: "db_date10" },
  date11: { type: "date", label: "db_date11" },
  date12: { type: "date", label: "db_date12" },
  date13: { type: "date", label: "db_date13" },
  date14: { type: "date", label: "db_date14" },
  date15: { type: "date", label: "db_date15" },
  date16: { type: "date", label: "db_date16" },
  date17: { type: "date", label: "db_date17" },
  date18: { type: "date", label: "db_date18" },
  date19: { type: "date", label: "db_date19" },
})

export type Col = T.ColOf<typeof Schema>

export const Columns: Col[] = (Object.keys(Schema.Columns) as T.ColumnTagsOf<typeof Schema>[]).map((id) => Schema.getCol(id))

export type Row = T.RowOf<typeof Schema>

export const Row = (i: number): Row => Columns.reduce((acc, { id, type }) => ({
  [id]: arbitraryValue(type, i),
  ...acc,
}), {}) as Row
